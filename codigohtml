let ball;
let leftPaddle, rightPaddle;
let leftScore = 0, rightScore = 0;

function setup() {
  createCanvas(800, 400);
  ball = new Ball();
  leftPaddle = new Paddle(true);
  rightPaddle = new Paddle(false);
}

function draw() {
  background(0);
  ball.update();
  ball.show();
  leftPaddle.show();
  rightPaddle.show();
  leftPaddle.update();
  rightPaddle.update();
  ball.checkPaddle(leftPaddle);
  ball.checkPaddle(rightPaddle);
  displayScores();
}

function keyPressed() {
  if (key === 'W') leftPaddle.move(-10);
  if (key === 'S') leftPaddle.move(10);
  if (key === 'ArrowUp') rightPaddle.move(-10);
  if (key === 'ArrowDown') rightPaddle.move(10);
}

function displayScores() {
  textSize(32);
  fill(255);
  text(leftScore, width / 4, 50);
  text(rightScore, 3 * width / 4, 50);
}

class Ball {
  constructor() {
    this.reset();
  }

  reset() {
    this.x = width / 2;
    this.y = height / 2;
    this.xSpeed = random(5, 7);
    this.ySpeed = random(5, 7);
  }

  update() {
    this.x += this.xSpeed;
    this.y += this.ySpeed;
    if (this.y < 0 || this.y > height) this.ySpeed *= -1;
    if (this.x < 0) { rightScore++; this.reset(); }
    if (this.x > width) { leftScore++; this.reset(); }
  }

  show() {
    fill(255);
    ellipse(this.x, this.y, 20, 20);
  }

  checkPaddle(paddle) {
    if (this.y > paddle.y && this.y < paddle.y + paddle.height && this.x < paddle.x + paddle.width && this.x > paddle.x) {
      this.xSpeed *= -1;
    }
  }
}

class Paddle {
  constructor(isLeft) {
    this.width = 10;
    this.height = 80;
    this.y = height / 2 - this.height / 2;
    this.isLeft = isLeft;
    this.x = isLeft ? 0 : width - this.width;
  }

  show() {
    fill(255);
    rect(this.x, this.y, this.width, this.height);
  }

  update() {
    if (keyIsDown(87)) this.y -= 10; // W key
    if (keyIsDown(83)) this.y += 10; // S key
    this.y = constrain(this.y, 0, height - this.height);
  }

  move(step) {
    this.y += step;
    this.y = constrain(this.y, 0, height - this.height);
  }
}
